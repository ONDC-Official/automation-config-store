name: Deploy Mock Service

on:
  workflow_dispatch:
  push:
    branches:
      - draft-TRV14-2.0.0
      # - "draft/*"
      # - "release/*"
      

jobs:
  build-and-verify:
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }}  # environment exactly matches branch name

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect build type
        run: |
          if [[ "${GITHUB_REF_NAME}" == draft* ]]; then
            echo "BUILD_TYPE=draft" >> $GITHUB_ENV
          elif [[ "${GITHUB_REF_NAME}" == release* ]]; then
            echo "BUILD_TYPE=release" >> $GITHUB_ENV
          else
            echo "BUILD_TYPE=default" >> $GITHUB_ENV
          fi


      - name: Prepare build repo
        run: |
          echo "Cloning generator repo..."
          ls -R $GITHUB_WORKSPACE
          git clone --single-branch --branch main https://github.com/ONDC-Official/automation-mock-service-generator.git automation-mock-service-generator
          ls -R automation-mock-service-generator
          echo "Initializing submodules..."
          cd automation-mock-service-generator
          git submodule update --init --recursive

          echo "Copying mock-config from current repo..."
          cp -r $GITHUB_WORKSPACE/mock-service/src/config/mock-config ./src/config/

          echo "Build repo ready at $(pwd)"

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GIT_PAT }}


      - name: Build Docker image
        run: |
          cd automation-mock-service-generator
          IMAGE_NAME=ghcr.io/ondc-official/automation-mock-service-${BUILD_TYPE}-${{vars.CONTAINER_NAME}}
          docker build -t $IMAGE_NAME:${{ github.sha }} .
        env:
          DOCKER_BUILDKIT: 1

      - name: Run container locally
        run: |
          IMAGE_NAME=ghcr.io/ondc-official/automation-mock-service-${BUILD_TYPE}-${{vars.CONTAINER_NAME}}
          cat > $REPO_DIR/.env <<EOF
              REDIS_USERNAME=${{ secrets.REDIS_USERNAME }}
              REDIS_HOST=${{ secrets.REDIS_HOST }}
              REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
              REDIS_PORT=${{ secrets.REDIS_PORT }}
              PORT=${{ vars.PORT }}
              API_SERVICE_URL=${{ vars.API_SERVICE_URL }}
              DOMAIN=${{ vars.DOMAIN }}
              CONFIG_SERVICE_URL=${{ vars.CONFIG_SERVICE_URL }}
              API_SERVICE_KEY=${{ secrets.API_SERVICE_KEY }}
              FORM_SERVICE=${{ vars.FORM_SERVICE }}
              NODE_ENV=${{ vars.NODE_ENV }}
              LOKI_HOST=${{ vars.LOKI_HOST }}
            EOF
            
          docker run -d --rm --name mock-test \
            -p ${{ vars.PORT }}:${{ vars.PORT }} \
            --env-file .env \
            $IMAGE_NAME:${{ github.sha }}
          sleep 5

      - name: Healthcheck
        run: |
          HEALTHCHECK_URL="http://localhost:${{ vars.PORT }}/mock/${{ vars.DOMAIN }}/health"
          echo "Checking $HEALTHCHECK_URL ..."
          for i in {1..10}; do
            if curl -sSf "$HEALTHCHECK_URL" > /dev/null; then
              echo "✅ Container is healthy"
              exit 0
            fi
            echo "Waiting... ($i)"
            sleep 2
          done
          echo "❌ Healthcheck failed!"
          docker logs mock-test
          exit 1

      - name: Stop test container
        if: always()
        run: docker stop mock-test || true

      - name: Tag & Push Images
        run: |
          IMAGE_NAME=ghcr.io/ondc-official/automation-mock-service-${BUILD_TYPE}-${{vars.CONTAINER_NAME}}
          docker tag $IMAGE_NAME:${{ github.sha }} $IMAGE_NAME:latest
          docker tag $IMAGE_NAME:${{ github.sha }} $IMAGE_NAME:stable
          docker push $IMAGE_NAME:${{ github.sha }}
          docker push $IMAGE_NAME:latest
          docker push $IMAGE_NAME:stable

  deploy:
    needs: build-and-verify
    runs-on: ubuntu-latest
    environment: |
      ${{
        (startsWith(github.ref_name, 'release') && format('release-{0}', github.ref_name)) ||
        (startsWith(github.ref_name, 'draft') && format('draft-{0}', github.ref_name)) ||
        (startsWith(github.ref_name, 'release') && 'release') ||
        (startsWith(github.ref_name, 'draft') && 'draft') ||
        'default'
      }}
    steps:
      - name: Detect build type
        run: |
          if [[ "${GITHUB_REF_NAME}" == draft* ]]; then
            echo "BUILD_TYPE=draft" >> $GITHUB_ENV
          elif [[ "${GITHUB_REF_NAME}" == release* ]]; then
            echo "BUILD_TYPE=release" >> $GITHUB_ENV
          else
            echo "BUILD_TYPE=default" >> $GITHUB_ENV
          fi

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            REPO_DIR="/opt/automation-mock-service-${BUILD_TYPE}-${{ vars.DOMAIN }}-${{ vars.VERSION }}"
            mkdir -p $REPO_DIR

            echo "Writing .env file..."
            cat > $REPO_DIR/.env <<EOF
            REDIS_USERNAME=${{ secrets.REDIS_USERNAME }}
            REDIS_HOST=${{ secrets.REDIS_HOST }}
            REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
            REDIS_PORT=${{ secrets.REDIS_PORT }}
            PORT=${{ vars.PORT }}
            API_SERVICE_URL=${{ vars.API_SERVICE_URL }}
            DOMAIN=${{ vars.DOMAIN }}
            CONFIG_SERVICE_URL=${{ vars.CONFIG_SERVICE_URL }}
            API_SERVICE_KEY=${{ secrets.API_SERVICE_KEY }}
            FORM_SERVICE=${{ vars.FORM_SERVICE }}
            NODE_ENV=${{ vars.NODE_ENV }}
            LOKI_HOST=${{ vars.LOKI_HOST }}
            EOF

            IMAGE_NAME=ghcr.io/ondc-official/automation-mock-service-${BUILD_TYPE}-${{vars.CONTAINER_NAME}}

            echo "Pulling latest image..."
            docker pull $IMAGE_NAME:stable || docker pull $IMAGE_NAME:${{ github.sha }}

            echo "Restarting container..."
            docker stop automation-mock-service-${BUILD_TYPE}-${{ vars.DOMAIN }}-${{ vars.VERSION }} || true
            docker rm automation-mock-service-${BUILD_TYPE}-${{ vars.DOMAIN }}-${{ vars.VERSION }} || true

            docker run -d --name automation-mock-service-${BUILD_TYPE}-${{ vars.DOMAIN }}-${{ vars.VERSION }} \
              --env-file $REPO_DIR/.env \
              -p ${{ vars.PORT }}:${{ vars.PORT }} \
              $IMAGE_NAME:stable
